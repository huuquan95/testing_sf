name: Validate PR on develop branch

on:
    pull_request:
      types: [opened, synchronize]
      branches: [ develop ]
      paths:
        - 'force-app/**'

# Jobs to be executed
jobs:
    validate-deployment-on-integration-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - uses: actions/setup-node@v4
              with:
                node-version: 20

            - name: 'Checkout source code'
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: 'cache sf and delta package'
              id: cache-sf
              uses: actions/cache@v3
              # env:
              #   cache-name: cache-node-modules
              with:
                path: |
                  ~/.sfdx
                  ~/.sfdx/plugins
                  ~/.npm
                  ~/.sf
                  node_modules
                key: cache-sf
                restore-keys: cache-sf

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PAYLOAD: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.
              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PAYLOAD > ./pr_body.txt
                  node ./parsePR.js
                  TESTS=$(cat testsToRun.txt)
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              if: ${{ steps.cache-sf.outputs.cache-hit != 'true' }}
              continue-on-error: true
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
                  mkdir ~/sf
                  tar xJf sf-linux-x64.tar.xz -C ~/sf --strip-components 1
                  echo "$HOME/sf/bin" >> $GITHUB_PATH
                  ~/sf/bin/sf version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              if: ${{ steps.cache-sf.outputs.cache-hit != 'true' }}
              continue-on-error: true
              run: | 
                  echo y | sf plugins install sfdx-git-delta
                  sf plugins

            # # Install java
            # - name: 'Installing java'
            #   run: sudo apt-get install openjdk-8-jdk

            # # Install SFDX scanner
            # - name: 'Installing SFDX scanner'
            #   run: sfdx plugins:install @salesforce/sfdx-scanner

            # Get the Integration Org SFDX URL and store it in a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sf org login sfdx-url --sfdx-url-file ./SFDX_INTEGRATION_URL.txt --set-default --alias integration

            # We use SFDX Git Delta to create a directory with only the metadata that has changed, this allows us
            # to deploy only those changes, as opposed to deploying the entire branch. This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 

            # Scan the code in the delta directory by using sfdx scanner. Output the results of the scan in a new file
            # called apexScanResults.sarif
            # - name: 'Scan code'
            #   run: |
            #       cd changed-sources
            #       sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
            #       cd ..

            # - name: Upload SARIF file
            #   uses: github/codeql-action/upload-sarif@v1
            #   with:
            #     sarif_file: changed-sources/apexScanResults.sarif

            # We do a check-only depploy and we only run the tests specified in the PR
            # If the env variable does not equal 'all', we know that there is a list of
            # tests that can be run
            - name: 'Check-only deploy delta changes - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sf project deploy start --source-dir "changed-sources/force-app" --dry-run --test-level RunSpecifiedTests --tests ${{env.APEX_TESTS}} --json

            # We do a check-only deploy and we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sf project deploy start --source-dir "changed-sources/force-app" --dry-run --test-level RunLocalTests  --json

            - name: 'Deploy destructive changes (if any)'
              run: sf project deploy start --metadata-dir "changed-sources/destructiveChanges" --dry-run --ignore-warnings
